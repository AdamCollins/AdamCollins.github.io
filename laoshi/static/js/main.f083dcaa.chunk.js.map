{"version":3,"sources":["Character.js","AnswerInput.js","Card.js","Navbar.js","serviceWorker.js","index.js"],"names":["Character","state","size","updateSize","container","document","getElementById","text","width","clientWidth","charCount","textContent","length","scale","style","fontSize","this","react_default","a","createElement","id","className","props","char","React","Component","AnswerInput","clear","_this","input","value","_this2","label","tip","type","ref","onChange","wait","t","cb","setTimeout","toCamelCase","s","console","log","charAt","toUpperCase","substring","Card","show","pinyinAnswer","pinyinTip","englishAnswer","englishTip","updatePinyin","e","setState","target","toLowerCase","updateTranslation","check","preventDefault","activeElement","blur","pinyinValid","card","pinyin","includes","englishValid","english","valid","nextCard","pinyinInput","englishInput","concat","src_Character_0","character","src_AnswerInput_0","onClick","Navbar","href","brand","react_github_btn","data-size","data-show-count","aria-label","Boolean","window","location","hostname","match","Index","loading","cards","index","fetch","then","data","json","array","sort","Math","random","floor","src_Navbar_0","src_Card_0","ReactDOM","render","src_Index","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f083dcaa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Character.css';\r\nclass Character extends React.Component{\r\n    state = {size:32}\r\n\r\n    updateSize = ()=>{\r\n        let container = document.getElementById('CharacterContainer');\r\n        let text = document.getElementById('Char'); \r\n        let width = container.clientWidth;\r\n        let charCount = text.textContent.length;\r\n        let scale = width/((charCount>1)? charCount*1.5:2*1.5);\r\n        text.style.fontSize = scale + 'px'; \r\n    }\r\n    componentDidMount(){\r\n        this.updateSize();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.updateSize();\r\n    }\r\n    render(){\r\n      return <section id=\"CharacterContainer\" className=\"Character\">\r\n                <h1 id=\"Char\" >{this.props.char}</h1>\r\n            </section>\r\n    }\r\n}\r\n\r\nexport default Character;","import React from 'react';\r\nimport './AnswerInput.css';\r\n\r\nclass AnswerInput extends React.Component{\r\n    clear = ()=>{\r\n        this.input.value = '';\r\n    }\r\n    render(){\r\n        return(\r\n                <section className=\"AnswerInput\">\r\n                    <label>\r\n                        {this.props.label}:<span className=\"correct tip\" > {this.props.tip}</span>\r\n                        <input type=\"text\" ref={input => this.input = input} onChange={this.props.onChange}></input>\r\n                    </label>\r\n                </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnswerInput;","import React from 'react';\nimport Character from './Character'\nimport Input from './AnswerInput'\nimport './Card.css';\n\n\nconst wait = (t, cb) => {\n  setTimeout(cb, t*1000);\n}\n\nconst toCamelCase = (s)=>{\n  console.log(typeof s)\n  if(s.length>0)\n    s = s.charAt(0).toUpperCase() + s.substring(1);\n\n  return s;\n}\n\nclass Card extends React.Component {\n  state = {\n    show:true,\n    pinyinAnswer: '',\n    pinyinTip:'',\n    englishAnswer: '',\n    englishTip:''\n  }\n\n  updatePinyin = (e)=>{\n    this.setState({pinyinAnswer:e.target.value.toLowerCase()});\n  }\n\n  \n  updateTranslation = (e)=>{\n    this.setState({englishAnswer:e.target.value.toLowerCase()});\n  }\n\n\n  check = (e)=>{\n    e.preventDefault();\n    document.activeElement.blur();\n\n    let pinyinValid = this.props.card.pinyin.includes(this.state.pinyinAnswer);\n    let englishValid = this.props.card.english.includes(this.state.englishAnswer);\n\n    this.setState({pinyinTip:toCamelCase(this.props.card.pinyin[0])});\n    this.setState({englishTip:toCamelCase(this.props.card.english[0])});\n\n    let valid = pinyinValid && englishValid;\n    wait(0.5,()=>{\n      if(valid){\n        this.setState({\n          show:false\n        }, ()=>{\n          wait(0.5,()=>{\n            this.props.nextCard();\n            this.setState({\n                show: true,\n                pinyinTip: '',\n                englishTip: ''\n              });\n              this.pinyinInput.clear();\n              this.englishInput.clear();\n          });\n        });\n    }\n    });\n  }\n  render(){\n    return (\n      <div className={`Card ${this.state.show?'slide-in':'slide-out'}`} >\n          <Character char={this.props.card.character}/>\n          <form>\n            <Input label=\"Pinyin\" onChange={this.updatePinyin} ref={input => this.pinyinInput = input} tip={this.state.pinyinTip} />\n            <Input label=\"Translation\" onChange={this.updateTranslation} ref={input => this.englishInput = input} tip={this.state.englishTip}/>\n            <button type=\"submit\" onClick={this.check} >Check</button>\n          </form>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from 'react';\r\nimport './Navbar.css';\r\nimport GitHubButton from 'react-github-btn';\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return (<ul className=\"Navbar\">\r\n                    <li className=\"brand\" ><a href=\"https://github.com/AdamCollins/laoshi\">{this.props.brand}</a></li>\r\n                    <li className=\"badge\"><GitHubButton href=\"https://github.com/AdamCollins/laoshi\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star AdamCollins/laoshi on GitHub\">Star</GitHubButton></li>\r\n                </ul>    \r\n                )\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport Navbar from './Navbar'\nimport * as serviceWorker from './serviceWorker';\n// import shuffle from 'lodash';\n\n\nclass Index extends React.Component{\n    state = {\n        loading:true,\n        cards: null\n    }\n    \n    nextCard = ()=>{\n        this.setState({\n            index: (this.state.index+1)%this.state.cards.length}\n            );\n    }\n    componentDidMount(){\n        let shuffle = (array) => array.sort(() => Math.random() - 0.5);\n        fetch('data/vocab.json')\n            .then(data=>data.json())\n            // .then(data=>shuffle(data))\n            .then(cards => this.setState({cards:shuffle(cards), loading:false, index:Math.floor(Math.random()*cards.length)}))\n\n    }\n    render(){\n        if(!this.state.cards){\n            console.log('loading...', this.state.cards);\n            return '...'\n        }\n        console.log(\"rendering\", this.state.cards)\n        return(\n            <div>\n                <Navbar brand=\"老师.\"/>\n                <Card card={this.state.cards[this.state.index]} nextCard={this.nextCard}/>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <Index/>\n    ,   \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}